CLIPS_REGEX =  Regex('videoUrl: \"(.*?)\"')

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			audio_codec = AudioCodec.AAC,
			video_codec = VideoCodec.H264,
			container = 'Container.MP4',
			video_resolution = 'sd',
			optimized_for_streaming = True,
			audio_channels = 2,
			parts = [PartObject(key=Callback(PlayVideo, url=url))]
		)
	]
		
####################################################################################################
def NormalizeURL(url):

	return url
	
####################################################################################################
def PlayVideo(url):

	page = HTTP.Request(url).content

	video_url = CLIPS_REGEX.findall(page)
	video_url=video_url[0]
	video_url = video_url.replace('\\', '')

	return Redirect(video_url)
	
####################################################################################################
def MetadataObjectForURL(url):

	content = HTML.ElementFromURL(url)

	title = content.xpath('//meta[@property="og:title"]')[0].get('content')

	try:
		thumb = content.xpath('//meta[@property="og:image"]')[0].get('content')
	except:
		thumb = R('icon-default.png')
	
	try:
		summary = content.xpath('//meta[@property="og:description"]')[0].get('content')
	except:
		summary = ""
	
	
	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = thumb
	)